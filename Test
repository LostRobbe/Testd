-- FullMovementForensics.lua
-- Ziel: alles loggen, keine Konfiguration notwendig
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer

-- Konfiguration intern
local LOOKBACK_MS = 300
local POLL_INTERVAL = 0.06
local ASSEMBLY_THRESHOLD = 0.01
local CFRAMESNAP_THRESHOLD = 0.03
local DETAILED_STACK = true

-- Hilfsfunktionen
local function nowStr() return os.date("%H:%M:%S") end
local function ts() return tick()*1000 end
local function prettyVec(v) if not v then return "nil" end; return ("(%.3f, %.3f, %.3f)"):format(v.X, v.Y, v.Z) end
local function log(...) print(("[%s][MF] %s"):format(nowStr(), table.concat({...}, " "))) end

-- Track letzte Aktionen
local lastInput = {when=0, kind=nil, detail=nil}
local lastGuiClick = {when=0, kind=nil, detail=nil}
local lastRemoteEvent = {when=0, name=nil, parent=nil, args=nil, traceback=nil}

-- Movement tracking
local trackedPrimary = nil
local lastAV = Vector3.new(0,0,0)
local lastVel = Vector3.new(0,0,0)
local lastCFrame = nil
local lastSampleTime = 0

-- Tastatureingaben tracken
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        local k = input.KeyCode
        if k == Enum.KeyCode.W or k == Enum.KeyCode.S or k == Enum.KeyCode.A or k == Enum.KeyCode.D
           or k == Enum.KeyCode.Up or k == Enum.KeyCode.Down or k == Enum.KeyCode.Left or k == Enum.KeyCode.Right then
            lastInput.when = ts()
            lastInput.kind = "Key"
            lastInput.detail = tostring(k)
            log("Input detected:", lastInput.kind, lastInput.detail, "ts=" .. math.floor(lastInput.when))
        end
    end
end)

-- GUI-Button clicks tracken
local function monitorGuiForClicks(guiParent)
    if not guiParent then return end
    local function attachToButton(btn)
        if not btn or not btn:IsA then return end
        if btn:GetAttribute("MF_Monitored") then return end
        btn:SetAttribute("MF_Monitored", true)
        pcall(function()
            btn.MouseButton1Click:Connect(function()
                lastGuiClick.when = ts()
                lastGuiClick.kind = "MouseButton1Click"
                lastGuiClick.detail = btn:GetFullName()
                log("GUI click:", lastGuiClick.detail, lastGuiClick.when)
            end)
        end)
        pcall(function()
            btn.Activated:Connect(function()
                lastGuiClick.when = ts()
                lastGuiClick.kind = "Activated"
                lastGuiClick.detail = btn:GetFullName()
                log("GUI activated:", lastGuiClick.detail, lastGuiClick.when)
            end)
        end)
    end
    for _, v in ipairs(guiParent:GetDescendants()) do
        if v:IsA("TextButton") or v:IsA("ImageButton") then
            attachToButton(v)
        end
    end
    guiParent.DescendantAdded:Connect(function(inst)
        if inst:IsA("TextButton") or inst:IsA("ImageButton") then
            task.wait(0.02)
            attachToButton(inst)
            log("New GUI button discovered:", inst:GetFullName())
        end
    end)
end

local function setupPlayerGuiWatcher()
    if LocalPlayer:FindFirstChild("PlayerGui") then
        monitorGuiForClicks(LocalPlayer.PlayerGui)
    end
    LocalPlayer.ChildAdded:Connect(function(child)
        if child.Name == "PlayerGui" then
            monitorGuiForClicks(child)
        end
    end)
end
setupPlayerGuiWatcher()

-- RemoteEvents tracken
local remoteListeners = {}
local function attachToRemoteEvent(ev)
    if not ev or ev.ClassName ~= "RemoteEvent" then return end
    if remoteListeners[ev] then return end
    remoteListeners[ev] = true
    pcall(function()
        ev.OnClientEvent:Connect(function(...)
            local a = {...}
            lastRemoteEvent.when = ts()
            lastRemoteEvent.name = ev.Name
            lastRemoteEvent.parent = ev.Parent and ev.Parent:GetFullName() or "nil"
            lastRemoteEvent.args = a
            local ok, tb = pcall(function() return debug and debug.traceback and debug.traceback() or nil end)
            lastRemoteEvent.traceback = ok and tb or nil
            log("RemoteEvent received:", ev:GetFullName(), "argsCount=" .. #a, "ts=" .. math.floor(lastRemoteEvent.when))
            if lastRemoteEvent.traceback then
                log("Traceback (truncated):", string.sub(lastRemoteEvent.traceback,1,400))
            end
        end)
    end)
end

local function scanAndAttachRemotes(container)
    if not container then return end
    for _, inst in ipairs(container:GetDescendants()) do
        if inst.ClassName == "RemoteEvent" then
            attachToRemoteEvent(inst)
        end
    end
    container.DescendantAdded:Connect(function(inst)
        if inst.ClassName == "RemoteEvent" then
            attachToRemoteEvent(inst)
            log("New RemoteEvent discovered:", inst:GetFullName())
        end
    end)
end

scanAndAttachRemotes(ReplicatedStorage)
scanAndAttachRemotes(Workspace)
scanAndAttachRemotes(Players)

-- Prim√§r-Teil des Fahrzeugs tracken
local function getPrimary()
    local char = LocalPlayer.Character
    if not char then return nil end
    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return nil end
    local seat = humanoid.SeatPart
    if not (seat and seat:IsA("VehicleSeat")) then return nil end
    local vehicle = seat.Parent
    if not vehicle then return nil end
    return vehicle.PrimaryPart, vehicle
end

RunService.Heartbeat:Connect(function(delta)
    if tick()*1000 - lastSampleTime < POLL_INTERVAL*1000 then return end
    lastSampleTime = tick()*1000

    local primary, vehicle = getPrimary()
    if not primary then
        trackedPrimary = nil
        return
    end

    if trackedPrimary ~= primary then
        trackedPrimary = primary
        lastAV = primary.AssemblyLinearVelocity or Vector3.new(0,0,0)
        lastVel = primary.Velocity or Vector3.new(0,0,0)
        lastCFrame = primary.CFrame
        log("Started movement forensics on", primary:GetFullName())
    end

    local av = primary.AssemblyLinearVelocity or Vector3.new(0,0,0)
    local vel = primary.Velocity or Vector3.new(0,0,0)
    local cf = primary.CFrame

    local dx = math.abs(av.X - lastAV.X)
    local dz = math.abs(av.Z - lastAV.Z)
    local avChanged = dx > ASSEMBLY_THRESHOLD or dz > ASSEMBLY_THRESHOLD
    local posDelta = (cf.Position - lastCFrame.Position).Magnitude
    local cframeJump = posDelta > CFRAMESNAP_THRESHOLD

    if avChanged or cframeJump then
        local now_ms = ts()
        log("MOVEMENT EVENT detected on", primary:GetFullName(), "| avDelta=(%.3f,%.3f) posDelta=%.3f"
            :format(dx, dz, posDelta))

        local function occurredWithin(rec)
            if not rec or not rec.when then return false end
            return (now_ms - rec.when) <= LOOKBACK_MS
        end

        local candidates = {}
        if occurredWithin(lastInput) then table.insert(candidates,{type="Keyboard", detail=lastInput.detail, age=now_ms-lastInput.when}) end
        if occurredWithin(lastGuiClick) then table.insert(candidates,{type="GUI", detail=lastGuiClick.detail, age=now_ms-lastGuiClick.when}) end
        if occurredWithin(lastRemoteEvent) then table.insert(candidates,{type="RemoteEvent", detail=(lastRemoteEvent.name or "nil").."@"..tostring(lastRemoteEvent.parent), age=now_ms-lastRemoteEvent.when}) end

        local verdict = "unklar"
        if #candidates == 1 then
            verdict = "vermutlich: "..candidates[1].type.." (age="..math.floor(candidates[1].age).."ms)"
        elseif #candidates > 1 then
            table.sort(candidates,function(a,b) return a.age<b.age end)
            verdict = "mehrere Kandidaten, wahrscheinlich: "..candidates[1].type.." (age="..math.floor(candidates[1].age).."ms)"
        else
            verdict = "keine unmittelbare Aktion in letzten "..LOOKBACK_MS.."ms"
        end
        log("FORENSICS:", verdict)

        if occurredWithin(lastRemoteEvent) then
            log("RemoteEvent detail:", lastRemoteEvent.name, "parent=", lastRemoteEvent.parent, "argsCount="..(#(lastRemoteEvent.args) or 0))
            if lastRemoteEvent.traceback then
                log("RemoteEvent traceback (truncated):", string.sub(lastRemoteEvent.traceback,1,400))
            end
        end
        if occurredWithin(lastGuiClick) then log("GUI click detail:", lastGuiClick.detail) end
        if occurredWithin(lastInput) then log("Keyboard detail:", lastInput.detail) end
    end

    lastAV = av
    lastVel = vel
    lastCFrame = cf
end)
